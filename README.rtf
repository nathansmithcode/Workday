{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Workday Project\
\
a) Libraries: Utilizing the URLSession API built into Apple Foundation as a means of fetching all data using REST. This allows for native data fetching as well as quicker speed in setting this up. \
\
b) Architecture:   This workday app is setup with data, views, and services separated out, building from a MVC design pattern, and including additional components as needed. All data is decoupled from views and called when needed from the view controllers.   \
\
c) Instructions: 1. Unzip and open the Xcode project. 2. Build and run application on an iPhone simulator (iPhone 14 Pro was used for testing). 3. Search images\
\
d) Notes:\
- Handled edge cases and polishes for such things as no results, long image descriptions, keyboard dismissal, location not always available. \
- Although I like working with SwiftUI and the reactive approach, I chose to implement this with UIKit, as that is a bit more familiar for me right now.\
- Included .git directory. Initially created locally and pushed all to remote repository. \
}